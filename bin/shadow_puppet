#!/usr/bin/env ruby
#== Sample manifest:
#
#  $ cat examples/foo.rb
#  class Foo < ShadowPuppet::Manifest
#   recipe :demo, :text => 'foo'
#   recipe :some_gems
#
#   def some_gems
#     package 'rails', :ensure => :updated, :provider => :gem
#     package 'railsmachine', :ensure => '1.0.5', :provider => :gem, :require => package('capistrano')
#     package 'capistrano', :ensure => :updated, :provider => :gem
#   end
#
#   def demo(options = {})
#     exec 'sample', :command => "echo '#{options[:text]}' > /tmp/sample.txt"
#     file '/tmp/sample2.txt', :ensure => :present, :content => Facter.to_hash.inspect
#   end
# end
#
#== Executing this manifest:
#
#  $ shadow_puppet examples/foo.rb
#  notice: /shadow_puppet:19861340/Exec[foo]/returns: executed successfully
#  $
#
#The shadow_puppet binary parses the given ruby code, which is
#expected to contain a class named Foo that inherits from
#ShadowPuppet::Manifest. An instance of this class is created, and the
#<tt>execute</tt> method is called. All output is printed to the console.

def unindent(string)
  indentation = string[/\A\s*/]
  string.strip.gsub(/^#{indentation}/, "")
end

begin
  require 'optparse'

  ShadowPuppetOptions = Struct.new(:graph, :noop)
  options = ShadowPuppetOptions.new

  opts = OptionParser.new do |opts|
    opts.banner = "Usage: shadow_puppet [options] <manifest>"

    opts.separator ""
    opts.separator "Specific options:"

    opts.on("--tutorial", "A simple tutorial for usage") do
      puts unindent(<<-EOF)
        NAME
          Shadow Puppet

        AUTHOR
          Jesse Newland
          jesse@railsmachine.com

        DESCRIPTION
          A Ruby DSL for puppet

        EXAMPLES
          Sample manifest:

            # foo.rb
            class Foo < ShadowPuppet::Manifest
              recipe :foo

              def foo
                exec :foo, :command => 'echo "foo" > /tmp/foo.txt'
                file '/tmp/example.txt', :ensure => :present, :content => Facter.to_hash.inspect
              end
            end

          Executing this manifest:

            $ shadow_puppet foo.rb
            notice: /shadow_puppet:19861340/Exec[foo]/returns: executed successfully
            $

          The shadow_puppet binary parses the given ruby code, which is
          expected to contain a class named Foo that inherits from
          ShadowPuppet::Manifest. An instance of this class is created, and the
          execute method is called. All output is printed to the console.
      EOF

      exit(1)
    end

    opts.on("-g", "--graph=[FILE]", "File to write graph .dot to") do |graph|
      options.graph = graph
    end

    opts.on("-n", "--noop", "Run in a no-op or dry-run mode") do
      options.noop = true
    end

    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end
  end

  opts.parse!

  unless filename = ARGV[0]
    puts "Error: Manifest filename must be provided\n\n"
    puts opts
    exit(1)
  end

  require 'rubygems'
  require 'fileutils'

  # hack around absurd number of deprecation warnings from puppet
  # using `metaclass`
  require 'active_support/core_ext/module/attribute_accessors'
  require 'active_support/core_ext/kernel/reporting'
  require 'active_support/deprecation'
  ActiveSupport::Deprecation.silenced = true

  require 'shadow_puppet'
  require 'active_support/inflector'
  require 'active_support/core_ext/string/inflections'
  unless String.included_modules.include?(ActiveSupport::CoreExtensions::String::Inflections)
    String.send :include, ActiveSupport::CoreExtensions::String::Inflections
  end

  if options.noop
    Puppet[:noop] = true
    Puppet[:show_diff] = true
  end

  klass = File.basename(filename, ".rb")
  require filename
  manifest = klass.classify.constantize.new

  if options.graph
    manifest.graph_to(klass.classify, options.graph)
  else
    manifest.execute!
  end

  exit(0)
rescue Errno::EACCES
  puts "Please run shadow_puppet as root"
rescue Exception => e
  if e.instance_of?(SystemExit)
    raise
  else
    puts "Uncaught exception: #{e.class}: #{e.message}"
    puts "\t#{e.backtrace.join("\n\t")}"
    exit(1)
  end
end
